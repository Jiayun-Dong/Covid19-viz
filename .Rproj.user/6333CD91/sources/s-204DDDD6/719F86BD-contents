
library(dplyr)
library(tidyr)
library(ggplot2)
library(directlabels)

setwd("/Users/jiayun/Documents/GitHub/COVID-19/csse_covid_19_data/csse_covid_19_time_series")

# load data
remove(list = ls())
df_raw = read.csv(file="time_series_covid19_confirmed_global.csv", head = TRUE, sep =",")
df_raw = as.data.frame(df_raw)

# data cleaning

    # separate Hubei from mainland China and name change of some observations
    dat_international = df_raw %>% 
      mutate(Country.Region = if_else(Province.State == "Hubei", "Hubei", as.character(Country.Region)),
             Country.Region = if_else(Province.State == "Hong Kong", "Hong Kong", as.character(Country.Region)),
             Country.Region = if_else(Province.State == "Macau", "Macao", as.character(Country.Region)),
             Country.Region = if_else(Country.Region == "Taiwan*", "Taiwan", as.character(Country.Region)),
             Country.Region = if_else(Country.Region == "China", "China ex Hubei", as.character(Country.Region)),
             Country.Region = if_else(Country.Region == "United Kingdom", "UK", as.character(Country.Region)),
             Country.Region = if_else(Country.Region == "Korea, South", "South Korea", as.character(Country.Region))) %>%
      filter(Country.Region != "Diamond Princess")
    
    # sum(is.na(dat_international))
    
    # aggregate by country
    dat_international = dat_international %>%
      select(-c(Lat, Long, Province.State)) %>%
      group_by(Country.Region) %>% 
      summarise_all(funs(sum), na.rm = TRUE)
    
    # convert to tidy panel data
    dat_international = gather(dat_international, "date", "cases", 2:ncol(dat_international))
    
    # date format
    dat_international = dat_international %>% 
      group_by(Country.Region) %>%
      mutate(date_index = row_number(),
             date = as.Date("2020-01-22") + date_index - 1) %>%
      select(-date_index)
    
    # # keep countries with more than 100 cases
    # dat_international = dat_international %>% 
    #   group_by(Country.Region) %>% 
    #   mutate(reach_100 = if_else(max(cases) >= 100, 1, 0)) %>% 
    #   filter(reach_100 == 1) %>% 
    #   select(-reach_100)

################### global overview ################### 
    
    # global overview
    global_overview = dat_international %>% group_by(date) %>% summarise(total = sum(cases))
    ggplot(global_overview, aes(x = date, y = total)) + 
      geom_line() + 
      scale_y_continuous(labels = scales::comma) +
      ggtitle("Number of People Infected in the World") + 
      theme_minimal() + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
    
    # number of countries reaching 1000
    dat_international_1000 = dat_international %>% 
      spread(date, cases) %>%
      mutate_if(is.numeric, function(x) as.numeric(x >= 1000))
    dat_international_1000 = data.frame("date" = as.Date(colnames(dat_international_1000)[-1]), 
                              "number_of_countries" = colSums(dat_international_1000[,-1]))
    ggplot(dat_international_1000, aes(x = date, y = number_of_countries)) +
      geom_line() +
      ggtitle("Number of Countries/Regions with Over 1000 Infections") + 
      theme_minimal() + theme(axis.title.x = element_blank(), axis.title.y = element_blank())

################### international comparison ###################     
    
# event: reaching 100 cases
df_event = dat_international %>% 
  group_by(Country.Region) %>%
  mutate(not_over_100 = if_else(cases <= 99, 1, 0),
         day_index = row_number(),
         event_date = sum(not_over_100) + 1) %>%
  filter(day_index >= event_date) %>% 
  mutate(day = day_index - event_date) %>%
  select(Country.Region, day, cases) %>%
  arrange(Country.Region, day)

# modify dates for Hubei: the data is available from 1/22. China's confirmed cases reached 100 at around 1/19
df_event[df_event$Country.Region == "Hubei", 2] = df_event[df_event$Country.Region == "Hubei", 2] + 3

# visualization parameter
x_max = ceiling(max(df_event$day)/5) * 5
y_max = max(df_event$cases) *1.05
country_list = c("China ex Hubei", "Hubei", "South Korea", "Iran", "Italy", "US", "Japan", "Singapore", "UK", "Germany", "Hong Kong", "Spain", "France", "Canada", "Taiwan", "Australia")
recent_date = as.Date(as.POSIXlt(Sys.time(), tz = "UTC")) - 1

# adjust no update issue on 3/13
df_event = df_event %>%
  mutate(cases = if_else(Country.Region %in% country_list & cases - lag(cases) <= 2 & !is.na(lead(cases)) & !is.na(lag(cases)),
                         (as.double(lag(cases)) * as.double(lead(cases)))^0.5, as.double(cases)))

ggplot(data = df_event %>% filter(Country.Region %in% country_list), aes(x = day, y = cases)) +
  geom_line(aes(color = Country.Region), size = 0.75) + 
  # geom_vline(xintercept = 0, linetype = "dashed", color = "gray", size=0.55) +
  scale_y_log10(breaks = c(100, 1000, 10000, 100000), 
                minor_breaks = c(seq(from = 100, to = 1000, length.out = 6), seq(from = 1000, to = 10000, length.out = 6),
                                 seq(from = 10000, to = 100000, length.out = 6)), 
                labels = scales::comma,
                limits = c(100, y_max)) +
  scale_x_continuous(breaks = seq(from = 0, to = x_max, by = 5), limits = c(0, x_max)) +
  xlab(paste0("Days since confirmed cases reached 100 \n (JHU Data, available from 2020-01-22, updated at ", recent_date, " 23:59 UTC)")) + 
  ylab("Number of confirmed cases") +
  geom_dl(aes(label = Country.Region), method = list(dl.trans(x = x - 0.1), "last.points", cex = 0.8)) +
  theme_minimal() + theme(legend.position = "bottom")

# countries ranked by cases
df_top = df_event %>% group_by(Country.Region) %>% summarise(maxcases = max(cases)) %>% arrange(desc(maxcases))
head(df_top, 10)
