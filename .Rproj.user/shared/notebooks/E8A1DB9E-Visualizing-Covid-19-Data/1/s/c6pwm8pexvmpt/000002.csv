"0","df_test = df_current %>%"
"0","  mutate(pos_rate = positive / totalTestResults) %>%"
"0","  select(state, positive, totalTestResults, pos_rate, test_per_million_pop) %>%"
"0","  filter(positive >= 100) %>%"
"0","  arrange(desc(positive))"
"0",""
"0","national_avg = df_current %>% "
"0","  ungroup() %>%"
"0","  summarise(avg_positive_rate = sum(positive, na.rm = TRUE) / sum(totalTestResults, na.rm = TRUE),"
"0","            avg_test_per_million_pop = round(sum(totalTestResults, na.rm = TRUE) / sum(population, na.rm = TRUE) * 1000000))"
"0",""
"0","slope = as.numeric(national_avg[1])"
"0","l = function(x) log10(slope * x)"
"0",""
"0","title = paste0(""COVID19 Testing in Selected States \nNational Average: Positive Rate: "", "
"0","               round(national_avg[1] * 1000) / 10, "
"0","               ""%; Tests per Million Population: "", "
"0","               round(national_avg[2]))"
"0",""
"0","state_list = c(""NY"", ""WA"", ""CA"", ""NJ"", ""NC"", ""DC"", ""DE"", ""MI"") # these are the states with labels"
"0","state_bubble = union(unique(df_test$state)[sample.int(50,15, replace = FALSE)], state_list)"
"0",""
"0","ggplot(df_test %>% filter(state %in% state_bubble), "
"0","       aes(x = totalTestResults, y = positive, size = test_per_million_pop, color = pos_rate, label = state)) +"
"0","  geom_point(alpha = 0.4) +"
"0","  geom_text(cex = 2.5, color = ""black"") +"
"0","  geom_label(data = df_test %>% filter(state %in% state_list), "
"0","             aes(label = paste0(round(pos_rate * 100), ""%; "", test_per_million_pop)),"
"0","             cex = 2, color = ""black"", nudge_y = 0.15, alpha = 0.05) +"
"0","  scale_color_gradient(low = ""yellow2"", high = ""red2"", name = ""Positive Rate"", limits = c(0, 0.5), oob = scales::squish) +"
"0","  scale_size(range = c(3, 18), breaks = c(250, 1000, 4000, 8000), name = ""Test Per Million Pop"") +"
"0","  stat_function(fun = l, linetype = ""dashed"", show.legend=FALSE) +"
"0","  scale_y_log10(labels = scales::comma) +"
"0","  scale_x_log10(labels = scales::comma) +"
"0","  xlab(""total tests (log scale)"") + ylab(""total cases (log scale)"") +"
"0","  ggtitle(title) +"
"0","  theme_minimal() + theme(legend.position = ""right"")"
