# color the top 10 states in red
state_list = df_current %>% arrange(desc(positive)) %>% pull(state)
state_list = state_list[1:10]
ggplot(data = df_test %>% filter(!state %in% state_list), aes(x = test_per_million_pop, y = pos_rate, label = state)) +
geom_text(cex = 2.5, color = "black") +
geom_text(data = df_test %>% filter(state %in% state_list), cex = 2.5, color = "red") +
geom_hline(yintercept = national_avg[1], linetype="dashed", color = "grey") +
geom_vline(xintercept = national_avg[2], linetype="dashed", color = "grey") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous(labels = scales::comma) +
xlab("Tests per million population") + ylab("Positive rate") + ggtitle(title) +
theme_minimal() + theme(legend.position = "right", panel.grid.major = element_blank(), panel.grid.minor = element_blank())
state_list = df_current %>% arrange(desc(death)) %>% pull(state)   # interested in the top 10 states in terms of number of cases
state_list = state_list[1:10]
ymax = ceiling(max(df_trajectory$death) / 1000) * 1000
xmax = ceiling(max(df_trajectory$day) / 5) *5
ggplot(data = df_trajectory %>% filter(state %in% state_list), aes(x = day, y = death)) +
geom_line(aes(color = state), size = 0.5) +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(minor_breaks = seq(from = 0, to = xmax, by = 5)) +
xlab(paste0("Days since cases reached 100")) +
ylab("Number of deaths") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom") +
theme_minimal() +
ggtitle("State Trajectories: Number of Deaths") +
geom_dl(aes(label = state), method = list(dl.trans(x = x - 0.1), "last.points", cex = 0.8)) +
theme(legend.position = "bottom")
plot_state = function(state_name){
df_trajectoy_state = df_trajectory %>%
filter(state == state_name) %>%
mutate(deathDailyIncrease = death - lag(death),
deathDailyIncrease = if_else(is.na(deathDailyIncrease), 0, as.double(deathDailyIncrease)),
deathRate = death / positive)
# projection assuming same growth rate
xmax = max(df_trajectoy_state$day)
ymax = max(df_trajectoy_state$death)
y = df_trajectoy_state$death[(xmax - 7) : (xmax - 3)]
x = df_trajectoy_state$day[(xmax - 7) : (xmax - 3)]
f = lm(log(y) ~ x)$coefficients
l = function(x) exp(f[1] + f[2] * x)
projection <- data.frame(x = (xmax - 7) : xmax, y = NA)
projection$y <- l(projection$x)
str = paste0("Average growth rate 3~7 days ago: ", round((exp(f[2]) - 1) * 100), "%")
# time series of positive cases
ggplot(data = df_trajectoy_state, aes(x = day)) +
geom_line(aes(y = death, color = "Deaths")) +
geom_bar(stat = "identity", aes(y = deathDailyIncrease, fill = "Daily Increase in Deaths")) +
geom_line(data = projection, aes(x = x, y = y, color = "Constant Growth"), linetype = "dashed") +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(breaks = seq(0, xmax, 7), labels = (df_trajectoy_state$date)[1 + seq(0, xmax, 7)]) +
scale_color_manual(values = c("grey","darkred")) +
scale_fill_manual(values = c("darkblue")) +
xlab("Date") +
ylab("Number of Deaths") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggtitle(paste0("Spread of Covid-19 in ", state_name, ": Deaths\n", str))
}
plot_state("NY")
df_trajectory %>%
filter(state == "NY")
t = df_trajectory %>% filter(state == "NY") %>% pull(day)
y = df_trajectory %>% filter(state == "NY") %>% pull(death)
# initial parameter
sigma = 10
mu = 30
alpha = 5000
param0 = c(mu, sigma, alpha)
death_curve = function(x, param) param[3] * pnorm((x - param[1])/param[2])
# loss
loss = function(param){
yhat = death_curve(t, parm)
return(sum((y - y_hat)^2))
}
# optimization
parm_star = optimx(par = param0, loss, lower = c(0,0,0), upper = c(300, 1000, 100000))
# loss
loss = function(param){
yhat = death_curve(t, param)
return(sum((y - y_hat)^2))
}
# optimization
parm_star = optimx(par = param0, loss, lower = c(0,0,0), upper = c(300, 1000, 100000))
t = df_trajectory %>% filter(state == "NY") %>% pull(day)
y = df_trajectory %>% filter(state == "NY") %>% pull(death)
# initial parameter
sigma = 10
mu = 30
alpha = 5000
param0 = c(mu, sigma, alpha)
death_curve = function(x, param) param[3] * pnorm((x - param[1])/param[2])
yhat = death_curve(t, param)
param = param0
yhat = death_curve(t, param)
sum((y - y_hat)^2)
# loss
loss = function(param){
yhat = death_curve(t, param)
return(sum((y - yhat)^2))
}
# optimization
parm_star = optimx(par = param0, loss, lower = c(0,0,0), upper = c(300, 1000, 100000))
# optimization
parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
# optimization
r = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
r
# optimization
output = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
output
yhat = death_curve(t, param)
plot(t, yhat)
yhat = death_curve(1:100, param)
# optimization
output = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
param = c(output$p1, output$p2, output$p3)
yhat = death_curve(1:100, param)
plot(t, yhat)
plot(1:100, yhat)
outbreak = df_trajectory %>% filter(state == "NY") %>% pull(date)[1]
df_trajectory %>% filter(state == "NY") %>% pull(date)
df_trajectory %>% filter(state == "NY") %>% pull(date)[1]
outbreak = (df_trajectory %>% filter(state == "NY") %>% pull(date))[1]
projection <- data.frame(x = as.Date(0:100 + outbreak), y = NA)
projection$y <- death_curve(0:100, param)
projection <- data.frame(d = as.Date(0:100 + outbreak), y = NA)
projection$y <- death_curve(0:100, param)
View(r)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line()
ggplot(data = projection, aes(x = d, y = y)) +
geom_line() +
scale_x_date(breaks = '7 days')
ggplot(data = projection, aes(x = d, y = y)) +
geom_line() +
scale_x_date(breaks = '15 days')
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(color = "grey") +
scale_x_date(breaks = '15 days')
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(color = "grey") +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death))
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(color = "grey") +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "darkred"))
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(color = "projection") +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory"))
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection")) +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory"))
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection", linetype = "dashed")) +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory"))
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection", linetype = "dashed")) +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection", linetype = "dashed"), show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma)
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle("Actual and Projected Trajectory for NY")
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection", linetype = "dashed"), show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = "darkred") +
scale_fill_manual(values = "darkblue") +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle("Actual and Projected Trajectory for NY")
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection", linetype = "dashed"), show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("grey", "darkred")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle("Actual and Projected Trajectory for NY")
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection", linetype = "dashed"), show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("darkred", "grey")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle("Actual and Projected Trajectory for NY")
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection"), linetype = "dashed", show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("darkred", "grey")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle("Actual and Projected Trajectory for NY")
project_state = function(state_name){
t = df_trajectory %>% filter(state == state_name) %>% pull(day)
y = df_trajectory %>% filter(state == state_name) %>% pull(death)
outbreak = (df_trajectory %>% filter(state == state_name) %>% pull(date))[1]
# initial parameter
sigma = 10
mu = 30
alpha = 5000
param0 = c(mu, sigma, alpha)
death_curve = function(x, param) param[3] * pnorm((x - param[1])/param[2])
# loss
loss = function(param){
yhat = death_curve(t, param)
return(sum((y - yhat)^2))
}
# optimization
output = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
param = c(output$p1, output$p2, output$p3)
projection <- data.frame(d = as.Date(0:100 + outbreak), y = NA)
projection$y <- death_curve(0:100, param)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection"), linetype = "dashed", show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("darkred", "grey")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle(paste0("Actual and Projected Trajectory for ", state_name))
}
project_state("NY")
```{r, echo = FALSE, warning=FALSE}
project_state("NY")
project_state("NJ")
project_state("IL")
project_state("CA")
project_state = function(state_name){
t = df_trajectory %>% filter(state == state_name) %>% pull(day)
y = df_trajectory %>% filter(state == state_name) %>% pull(death)
outbreak = (df_trajectory %>% filter(state == state_name) %>% pull(date))[1]
# initial parameter
sigma = 10
mu = 30
alpha = 10000
param0 = c(mu, sigma, alpha)
death_curve = function(x, param) param[3] * pnorm((x - param[1])/param[2])
# loss
loss = function(param){
yhat = death_curve(t, param)
return(sum((y - yhat)^2))
}
# optimization
output = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
param = c(output$p1, output$p2, output$p3)
projection <- data.frame(d = as.Date(0:100 + outbreak), y = NA)
projection$y <- death_curve(0:100, param)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection"), linetype = "dashed", show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == "NY"), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("darkred", "grey")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle(paste0("Actual and Projected Trajectory for ", state_name))
}
project_state("CA")
project_state = function(state_name){
t = df_trajectory %>% filter(state == state_name) %>% pull(day)
y = df_trajectory %>% filter(state == state_name) %>% pull(death)
outbreak = (df_trajectory %>% filter(state == state_name) %>% pull(date))[1]
# initial parameter
sigma = 10
mu = 30
alpha = 10000
param0 = c(mu, sigma, alpha)
death_curve = function(x, param) param[3] * pnorm((x - param[1])/param[2])
# loss
loss = function(param){
yhat = death_curve(t, param)
return(sum((y - yhat)^2))
}
# optimization
output = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
param = c(output$p1, output$p2, output$p3)
projection <- data.frame(d = as.Date(0:100 + outbreak), y = NA)
projection$y <- death_curve(0:100, param)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection"), linetype = "dashed", show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == state_name), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("darkred", "grey")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle(paste0("Actual and Projected Trajectory for ", state_name))
}
project_state("CA")
project_state("IL")
project_state = function(state_name){
t = df_trajectory %>% filter(state == state_name) %>% pull(day)
y = df_trajectory %>% filter(state == state_name) %>% pull(death)
outbreak = (df_trajectory %>% filter(state == state_name) %>% pull(date))[1]
# initial parameter
sigma = 10
mu = 30
alpha = 2000
param0 = c(mu, sigma, alpha)
death_curve = function(x, param) param[3] * pnorm((x - param[1])/param[2])
# loss
loss = function(param){
yhat = death_curve(t, param)
return(sum((y - yhat)^2))
}
# optimization
output = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
param = c(output$p1, output$p2, output$p3)
projection <- data.frame(d = as.Date(0:100 + outbreak), y = NA)
projection$y <- death_curve(0:100, param)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection"), linetype = "dashed", show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == state_name), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("darkred", "grey")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle(paste0("Actual and Projected Trajectory for ", state_name))
}
project_state("IL")
project_state("NJ")
project_state("IL")
project_state("NJ")
project_state("IL")
project_state("MI")
project_state("NY")
project_state = function(state_name){
t = df_trajectory %>% filter(state == state_name) %>% pull(day)
y = df_trajectory %>% filter(state == state_name) %>% pull(death)
outbreak = (df_trajectory %>% filter(state == state_name) %>% pull(date))[1]
# initial parameter
sigma = 10
mu = 30
alpha = 2000
param0 = c(mu, sigma, alpha)
death_curve = function(x, param) param[3] * pnorm((x - param[1])/param[2])
# loss
loss = function(param){
yhat = death_curve(t, param)
return(sum((y - yhat)^2))
}
# optimization
output = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
param = c(output$p1, output$p2, output$p3)
peak = as.Date(output + output$p1)
total = output$p3
projection <- data.frame(d = as.Date(0:100 + outbreak), y = NA)
projection$y <- death_curve(0:100, param)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection"), linetype = "dashed", show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == state_name), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("darkred", "grey")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle(paste0("Actual and Projected Trajectory for ", state_name, "\nProjected Peak: ", peak, "Total Deaths: ", total))
}
project_state("NY")
project_state = function(state_name){
t = df_trajectory %>% filter(state == state_name) %>% pull(day)
y = df_trajectory %>% filter(state == state_name) %>% pull(death)
outbreak = (df_trajectory %>% filter(state == state_name) %>% pull(date))[1]
# initial parameter
sigma = 10
mu = 30
alpha = 2000
param0 = c(mu, sigma, alpha)
death_curve = function(x, param) param[3] * pnorm((x - param[1])/param[2])
# loss
loss = function(param){
yhat = death_curve(t, param)
return(sum((y - yhat)^2))
}
# optimization
output = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
param = c(output$p1, output$p2, output$p3)
peak = as.Date(outbreak + output$p1)
total = output$p3
projection <- data.frame(d = as.Date(0:100 + outbreak), y = NA)
projection$y <- death_curve(0:100, param)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection"), linetype = "dashed", show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == state_name), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("darkred", "grey")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle(paste0("Actual and Projected Trajectory for ", state_name, "\nProjected Peak: ", peak, "Total Deaths: ", total))
}
project_state("NY")
project_state("NY")
project_state = function(state_name){
t = df_trajectory %>% filter(state == state_name) %>% pull(day)
y = df_trajectory %>% filter(state == state_name) %>% pull(death)
outbreak = (df_trajectory %>% filter(state == state_name) %>% pull(date))[1]
# initial parameter
sigma = 10
mu = 30
alpha = 2000
param0 = c(mu, sigma, alpha)
death_curve = function(x, param) param[3] * pnorm((x - param[1])/param[2])
# loss
loss = function(param){
yhat = death_curve(t, param)
return(sum((y - yhat)^2))
}
# optimization
output = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
param = c(output$p1, output$p2, output$p3)
peak = as.Date(outbreak + output$p1)
total = round(output$p3)
projection <- data.frame(d = as.Date(0:100 + outbreak), y = NA)
projection$y <- death_curve(0:100, param)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection"), linetype = "dashed", show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == state_name), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("darkred", "grey")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle(paste0("Actual and Projected Trajectory for ", state_name, "\nProjected Peak: ", peak, "Total Deaths: ", total))
}
project_state("NY")
project_state("NJ")
project_state("IL")
project_state("MI")
project_state = function(state_name){
t = df_trajectory %>% filter(state == state_name) %>% pull(day)
y = df_trajectory %>% filter(state == state_name) %>% pull(death)
outbreak = (df_trajectory %>% filter(state == state_name) %>% pull(date))[1]
# initial parameter
sigma = 10
mu = 30
alpha = 2000
param0 = c(mu, sigma, alpha)
death_curve = function(x, param) param[3] * pnorm((x - param[1])/param[2])
# loss
loss = function(param){
yhat = death_curve(t, param)
return(sum((y - yhat)^2))
}
# optimization
output = parm_star = optimx(par = param0, loss, lower = c(0,0.01,0), upper = c(300, 1000, 100000))
param = c(output$p1, output$p2, output$p3)
peak = as.Date(outbreak + output$p1)
total = round(output$p3)
projection <- data.frame(d = as.Date(0:100 + outbreak), y = NA)
projection$y <- death_curve(0:100, param)
ggplot(data = projection, aes(x = d, y = y)) +
geom_line(aes(color = "projection"), linetype = "dashed", show.legend = FALSE) +
geom_line(data = df_trajectory %>% filter(state == state_name), aes(x = date, y = death, color = "actual trajectory")) +
scale_x_date(breaks = '15 days') +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("darkred", "grey")) +
ylab("Number of deaths") + xlab("date") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle(paste0("Actual and Projected Trajectory for ", state_name, "\nProjected Peak: ", peak, ", Total Deaths: ", total))
}
project_state("NY")
project_state("IL")
project_state("MI")
project_state("NJ")
plot_state("NJ")
plot_state("NY")
plot_state("MI")
plot_state("IL")
plot_state("FL")
