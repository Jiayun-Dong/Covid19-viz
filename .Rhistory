ylab("Number of Deaths") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggtitle(paste0("Spread of Covid-19 in ", state_name, ": Deaths\n", str))
}
plot_state("NY")
plot_state("CA")
plot_state("WA")
plot_state("NJ")
project_state = function(state_name){
df_trajectoy_state = df_trajectory %>%
filter(state == state_name) %>%
mutate(deathDailyIncrease = death - lag(death),
deathDailyIncrease = if_else(is.na(deathDailyIncrease), 0, as.double(deathDailyIncrease)),
deathRate = death / positive)
# fit curve
y = df_trajectoy_state %>% pull(death)
t = df_trajectoy_state %>% pull(day)
# initial parameter
sigma = 10
mu = 30
alpha = 5000
parm0 = c(mu, sigma, alpha)
# loss function
loss = function(parm){
death_curve = function(x, parm) parm[3] * pnorm((x - parm[1])/parm[2])
y_hat = death_curve(t, parm)
return(sum((y - y_hat)^2) * 0.5)
}
# optimization
parm_star = optimx(par = parm0, loss, lower = c(0, 0, 0), upper = c(300, 1000, 100000))
mu = as.numeric(parm_star[1])
sigma = as.numeric(parm_star[2])
alpha = as.numeric(parm_star[3])
# projection
death_curve = function(x) alpha * pnorm((x - mu)/sigma)
# plot projection
projection_state = data.frame(day = (1 : (2*mu)),
projectedDeath = death_curve(1 : (2*mu)))
title = paste0("Spread of Covid-19 in ", state_name, ": \n", "Projected peak at ", df_trajectoy_state$date[1] + mu,
"; Projected total deaths ", round(alpha))
ggplot(data = projection_state, aes(x = day)) +
geom_line(aes(y = projectedDeath, color = "Projected Deaths")) +
geom_line(data = df_trajectoy_state, aes(x = day, y = death, color = "Deaths")) +
geom_bar(data = df_trajectoy_state, stat = "identity", aes(y = deathDailyIncrease, fill = "Daily Increase in Deaths")) +
scale_y_continuous(labels = scales::comma, limits = c(0, alpha)) +
scale_x_continuous(breaks = seq(0, 2*mu, 14), labels = df_trajectoy_state$date[1] + seq(0, 2*mu, 14)) +
scale_color_manual(values = c("darkred","grey")) +
scale_fill_manual(values = c("darkblue")) +
xlab("Date") +
ylab("Number of Deaths") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.text.x = element_text(angle = 45)) +
ggtitle(title)
}
project_state("NY")
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(viridis)
library(directlabels)
library(tidyr)
library(optimx)
setwd("/Users/jiayun/Documents/GitHub/Covid19-viz")
remove(list = ls())
# read JHU data
df_raw = as.data.frame(read.csv(file="time_series_covid19_confirmed_global.csv", head = TRUE, sep =","))
# data cleaning
# separate Hubei from mainland China and name change of some observations
dat_international = df_raw %>%
mutate(Country.Region = if_else(Province.State == "Hubei", "Hubei", as.character(Country.Region)),
Country.Region = if_else(Province.State == "Hong Kong", "Hong Kong", as.character(Country.Region)),
Country.Region = if_else(Province.State == "Macau", "Macao", as.character(Country.Region)),
Country.Region = if_else(Country.Region == "Taiwan*", "Taiwan", as.character(Country.Region)),
Country.Region = if_else(Country.Region == "China", "China ex Hubei", as.character(Country.Region)),
Country.Region = if_else(Country.Region == "United Kingdom", "UK", as.character(Country.Region)),
Country.Region = if_else(Country.Region == "Korea, South", "South Korea", as.character(Country.Region))) %>%
filter(Country.Region != "Diamond Princess")
# sum(is.na(dat_international))  # check for missing values
# aggregate by country
dat_international = dat_international %>%
select(-c(Lat, Long, Province.State)) %>%
group_by(Country.Region) %>%
summarise_all(funs(sum), na.rm = TRUE)
# convert to tidy panel data
dat_international = gather(dat_international, "date", "cases", 2:ncol(dat_international))
# date format
dat_international = dat_international %>%
group_by(Country.Region) %>%
mutate(date_index = row_number(),
date = as.Date("2020-01-22") + date_index - 1) %>%
select(-date_index)
# global overview
global_overview = dat_international %>% group_by(date) %>% summarise(total = sum(cases))
ggplot(global_overview, aes(x = date, y = total)) +
geom_line() +
scale_y_continuous(labels = scales::comma) +
scale_x_date(breaks = "15 days") +
ggtitle("Number of People Infected with Covid-19 in the World") +
theme_minimal() + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
# number of countries reaching 100
dat_international_100 = dat_international %>%
spread(date, cases) %>%
mutate_if(is.numeric, function(x) as.numeric(x >= 100))
dat_international_100 = data.frame("date" = as.Date(colnames(dat_international_100)[-1]),
"number_of_countries" = colSums(dat_international_100[,-1]))
# number of countries reaching 1000
dat_international_1000 = dat_international %>%
spread(date, cases) %>%
mutate_if(is.numeric, function(x) as.numeric(x >= 1000))
dat_international_1000 = data.frame("date" = as.Date(colnames(dat_international_1000)[-1]),
"number_of_countries" = colSums(dat_international_1000[,-1]))
# number of countries reaching 100
ggplot(dat_international_100, aes(x = date, y = number_of_countries)) +
geom_line() +
ggtitle("Number of Countries/Regions with Over 100 Infections") +
theme_minimal() + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
# number of countries reaching 1000
ggplot(dat_international_1000, aes(x = date, y = number_of_countries)) +
geom_line() +
ggtitle("Number of Countries/Regions with Over 1000 Infections") +
theme_minimal() + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
# event study: reaching 100 cases is defined as an outbreak
df_event = dat_international %>%
group_by(Country.Region) %>%
mutate(not_over_100 = if_else(cases <= 99, 1, 0),
day_index = row_number(),
event_date = sum(not_over_100) + 1) %>%
filter(day_index >= event_date) %>%
mutate(day = day_index - event_date) %>%
select(Country.Region, day, cases) %>%
arrange(Country.Region, day)
# modify dates for Hubei: the data is available from 1/22. China's confirmed cases reached 100 at around 1/18
df_event[df_event$Country.Region == "Hubei", 2] = df_event[df_event$Country.Region == "Hubei", 2] + 4
# countries ranked by cases
df_top = df_event %>% group_by(Country.Region) %>% summarise(maxcases = max(cases)) %>% arrange(desc(maxcases))
names(df_top) = c("Country/Region", "Number of Confirmed Cases")
head(df_top, 10)
# visualization parameter
xmax = ceiling(max(df_event$day)/5) * 5
ymax = max(df_event$cases) *1.1
country_list = c("China ex Hubei", "Hubei", "South Korea", "Iran", "Italy", "US", "Japan", "Singapore", "UK", "Germany", "Hong Kong", "Spain", "France", "Canada", "Taiwan", "Australia")
recent_date = as.Date(as.POSIXlt(Sys.time(), tz = "UTC")) - 1
# adjust no update issue on 3/13
df_event = df_event %>%
mutate(cases = if_else(Country.Region %in% country_list & cases - lag(cases) <= 2 & !is.na(lead(cases)) & !is.na(lag(cases)),
(as.double(lag(cases)) * as.double(lead(cases)))^0.5, as.double(cases)))
ggplot(data = df_event %>% filter(Country.Region %in% country_list), aes(x = day, y = cases)) +
geom_line(aes(color = Country.Region), size = 0.75) +
# geom_vline(xintercept = 0, linetype = "dashed", color = "gray", size=0.55) +
scale_y_log10(breaks = c(100, 500, 1000, 5000, 10000, 50000, 100000, 500000),
minor_breaks = c(seq(from = 0, to = 1000, length.out = 5), seq(from = 0, to = 10000, length.out = 5),
seq(from = 0, to = 100000, length.out = 5), 250000),
labels = scales::comma,
limits = c(100, ymax)) +
scale_x_continuous(breaks = seq(from = 0, to = xmax, by = 5), limits = c(0, xmax)) +
xlab(paste0("Days since confirmed cases reached 100 \n (JHU Data, available from 2020-01-22, updated at ", recent_date, " 23:59 UTC)")) +
ylab("Number of confirmed cases") +
geom_dl(aes(label = Country.Region), method = list(dl.trans(x = x - 0.1), "last.points", cex = 0.8)) +
theme_minimal() + theme(legend.position = "bottom")
remove(list = ls())
# read COVID-TRACKING data
dat = as.data.frame(fromJSON("https://covidtracking.com/api/states/daily")) %>%
select(state, date, positive, negative, pending, death, total) %>%
mutate(date = as.Date(as.character(date), format = "%Y%m%d"),
death = if_else(is.na(death), 0, as.double(death)),
pending = if_else(is.na(pending), 0, as.double(pending)),
negative = if_else(is.na(negative), 0, as.double(negative)),
totalTestResults = total - pending) %>%  # excluding tests with pending results
arrange(state, date) %>%
select(-total)
# read US population data
dat_pop = read.csv(file="StatePopulations.csv", head = TRUE, sep =",") %>%
mutate(state_abbrev = as.character(state_abbrev)) %>%
select(state = state_abbrev, population = X2018.Population)
# join datafreames
dat = dat %>%
left_join(dat_pop, by = c("state" = "state")) %>%
mutate(positive_per_million_pop = round(positive / population * 1000000),
death_per_million_pop = round(death / population * 1000000),
test_per_million_pop = round(totalTestResults / population * 1000000))
# the US trajectory of cases
overview = dat %>%
group_by(date) %>%
summarise_if(is.numeric, sum, na.rm=TRUE) %>% # aggregate numeriac variables at national level
mutate(positiveDailyIncrease = positive - lag(positive),
deathDailyIncrease = death - lag(death),
testResultsDailyIncrease = totalTestResults - lag(totalTestResults),
positiveDailyIncrease = replace_na(positiveDailyIncrease, 0), # the first day has no lag: set as zero
testResultsDailyIncrease = replace_na(testResultsDailyIncrease, 0),
deathDailyIncrease = replace_na(deathDailyIncrease, 0),
positiveRate = positive / totalTestResults,
deathRate = death / positive,
day = row_number())
# projection assuming same growth rate
xmax = max(overview$day)
ymax = max(overview$positive)
y = overview$positive[(xmax - 7) : (xmax - 3)]
x = overview$day[(xmax - 7) : (xmax - 3)]
f = lm(log(y) ~ x)$coefficients
l = function(x) exp(f[1] + f[2] * x)
projection <- data.frame(x = (xmax - 7) : xmax, y = NA)
projection$y <- l(projection$x)
# time series of positive cases
ggplot(data = overview, aes(x = day)) +
geom_line(aes(y = positive, color = "Positive Cases")) +
geom_bar(stat = "identity", aes(y = positiveDailyIncrease, fill = "Daily Increase in Positive Cases")) +
geom_line(data = projection, aes(x = x, y = y, color = "Projected Trajectory"), linetype = "dashed", show.legend=FALSE) +
# geom_line(aes(y = positiveRate * ymax, color = "Positive Rate")) +
scale_x_continuous(breaks = seq(1,xmax, 5), labels = overview$date[seq(1,xmax, 5)]) +
scale_y_continuous(labels = scales::comma
# , sec.axis = sec_axis(~. / ymax, name = "Positive Rate",
#                     breaks = seq(0,1,length.out = 6),
#                     labels = c("0%", "20%", "40%", "60%", "80%", "100%"))
) +
scale_color_manual(values = c("darkred"
# , "red"
, "grey")) +
scale_fill_manual(values = "darkblue") +
ylab("Number of positive cases") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank()
, axis.title.y = element_blank()
) +
ggtitle("Overview of Covid-19 in the US: Positive Cases")
# # projection assuming same growth rate
#   xmax = max(overview$day)
#   ymax = max(overview$totalTestResults)
#   y = overview$totalTestResults[(xmax - 7) : (xmax - 3)]
#   x = overview$day[(xmax - 7) : (xmax - 3)]
#   f = lm(log(y) ~ x)$coefficients
#   l = function(x) exp(f[1] + f[2] * x)
#   projection <- data.frame(x = (xmax - 7) : xmax, y = NA)
#   projection$y <- l(projection$x)
# time series of testing
ggplot(data = overview, aes(x = day)) +
geom_line(aes(y = totalTestResults, color = "Total Test Results")) +
geom_bar(stat = "identity", aes(y = testResultsDailyIncrease, fill = "Daily Increase in Test Results")) +
# geom_line(data = projection, aes(x = x, y = y, color = "Projected Trajectory"), linetype = "dashed") +
scale_x_continuous(breaks = seq(1,xmax, 5), labels = overview$date[seq(1,xmax, 5)]) +
scale_y_continuous(labels = scales::comma) +
# scale_color_manual(values = c("grey", "darkred")) +
scale_color_manual(values = c("darkred")) +
scale_fill_manual(values = "darkblue") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle("Overview of Covid-19 in the US: Tests")
# time series of positive rate
ggplot(data = overview, aes(x = day)) +
geom_line(aes(y = positiveRate, color = "Positive Rate"), show.legend = FALSE) +
scale_x_continuous(breaks = seq(1,xmax, 5), labels = overview$date[seq(1,xmax, 5)]) +
scale_y_continuous(labels = scales::percent, limits = c(min(overview$positiveRate)*0.9, max(overview$positiveRate)*1.1)) +
scale_color_manual(values = c("darkred")) +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank()) +
ggtitle("Overview of Covid-19 in the US: Positive Rate")
xmax = max(overview$day)
ymax = max(overview$death)
# time series of deaths
ggplot(data = overview, aes(x = day)) +
geom_line(aes(y = death, color = "Deaths")) +
geom_bar(stat = "identity", aes(y = deathDailyIncrease, fill = "Daily Increase in Deaths")) +
geom_line(aes(y = deathRate * ymax * 10, color = "Death Rate")) +
scale_x_continuous(breaks = seq(1,xmax, 5), labels = overview$date[seq(1,xmax, 5)]) +
scale_y_continuous(labels = scales::comma
, sec.axis = sec_axis(~. / ymax, name = "Death Rate",
breaks = seq(0, 1,length.out = 6),
labels = c("0%", "2%", "4%", "6%", "8%", "10%"))
) +
scale_color_manual(values = c("red", "darkred")) +
scale_fill_manual(values = "darkblue") +
ylab("Number of deaths") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.title.x = element_blank()
) +
ggtitle("Overview of Covid-19 in the US: Deaths")
# trajectories of states
df_trajectory = dat %>%
group_by(state) %>%
mutate(less_than_100 = if_else(positive <= 99, 1, 0),
day = row_number(),
outbreak = sum(less_than_100) + 1,
day = day - outbreak) %>%
filter(day >= 0) %>%
select(state, day, positive, death, test_per_million_pop, totalTestResults, date)
# current situation
df_current = dat %>%
group_by(state) %>% filter(date == max(date)) %>% arrange(desc(positive))
state_list = df_current %>% arrange(desc(positive)) %>% pull(state)   # interested in the top 10 states in terms of number of cases
state_list = state_list[1:10]
ymax = ceiling(max(df_trajectory$positive) / 1000) * 1000
xmax = ceiling(max(df_trajectory$day) / 5) *5
ggplot(data = df_trajectory %>% filter(state %in% state_list), aes(x = day, y = positive)) +
geom_line(aes(color = state), size = 0.5) +
scale_y_log10(minor_breaks = c(seq(from = 0, to = 1000, length.out = 5), seq(from = 0, to = 10000, length.out = 5),
seq(from = 0, to = 100000, length.out = 5)),
limits = c(100, 150000),
labels = scales::comma) +
scale_x_continuous(minor_breaks = seq(from = 0, to = xmax, by = 1)) +
xlab(paste0("Days since cases reached 100")) +
ylab("Number of cases (in log scale)") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom") +
theme_minimal() +
ggtitle("State Trajectories: Number of Cases") +
geom_dl(aes(label = state), method = list(dl.trans(x = x - 0.1), "last.points", cex = 0.8)) +
theme(legend.position = "bottom")
plot_state = function(state_name){
df_trajectoy_state = df_trajectory %>%
filter(state == state_name) %>%
mutate(positiveDailyIncrease = positive - lag(positive),
positiveDailyIncrease = if_else(is.na(positiveDailyIncrease), 0, as.double(positiveDailyIncrease)),
positiveRate = positive / totalTestResults)
# projection assuming same growth rate
xmax = max(df_trajectoy_state$day)
ymax = max(df_trajectoy_state$positive)
y = df_trajectoy_state$positive[(xmax - 7) : (xmax - 3)]
x = df_trajectoy_state$day[(xmax - 7) : (xmax - 3)]
f = lm(log(y) ~ x)$coefficients
l = function(x) exp(f[1] + f[2] * x)
projection <- data.frame(x = (xmax - 7) : xmax, y = NA)
projection$y <- l(projection$x)
# time series of positive cases
ggplot(data = df_trajectoy_state, aes(x = day)) +
geom_line(aes(y = positive, color = "Positive Cases")) +
geom_bar(stat = "identity", aes(y = positiveDailyIncrease, fill = "Daily Increase in Positive Cases")) +
geom_line(data = projection, aes(x = x, y = y, color = "Constant Growth"), linetype = "dashed") +
geom_line(aes(y = positiveRate * ymax, color = "Positive Rate")) +
scale_y_continuous(labels = scales::comma,
sec.axis = sec_axis(~. / ymax, name = "Positive Rate",
breaks = seq(0,1,length.out = 6),
labels = c("0%", "20%", "40%", "60%", "80%", "100%"))) +
scale_x_continuous(breaks = seq(0, xmax, 5), labels = (df_trajectoy_state$date)[1 + seq(0, xmax, 5)]) +
scale_color_manual(values = c("grey", "darkred", "red")) +
scale_fill_manual(values = c("darkblue")) +
xlab("Days since cases reached 100") + ylab("Number of Positive Cases") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggtitle(paste0("Spread of Covid-19 in ", state_name))
}
plot_state("NY")
plot_state("CA")
plot_state("MA")
plot_state("WA")
state_list = df_current %>% arrange(desc(totalTestResults)) %>% pull(state)   # interested in the top 10 states in terms of total tests
state_list = state_list[1:10]
ymax = ceiling(max(df_trajectory$totalTestResults) / 1000) * 1000
xmax = ceiling(max(df_trajectory$day) / 5) * 5
ggplot(data = df_trajectory %>% filter(state %in% state_list), aes(x = day, y = totalTestResults)) +
geom_line(aes(color = state), size = 0.5) +
scale_x_continuous(minor_breaks = seq(from = 0, to = xmax, by = 1)) +
scale_y_continuous(labels = scales::comma) +
xlab(paste0("Days since cases reached 100")) +
ylab("Number of tests ") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank()) +
ggtitle("State Trajectories: Number of Tests") +
geom_dl(aes(label = state), method = list(dl.trans(x = x - 0.1), "last.points", cex = 0.8))
state_list = df_current %>% arrange(desc(test_per_million_pop)) %>% pull(state)   # interested in the top 10 states in terms of test_per_million_pop
state_list = state_list[1:10]
ymax = ceiling(max(df_trajectory$test_per_million_pop) / 1000) * 1000
xmax = ceiling(max(df_trajectory$day) / 5) * 5
ggplot(data = df_trajectory %>% filter(state %in% state_list), aes(x = day, y = test_per_million_pop)) +
geom_line(aes(color = state), size = 0.5) +
scale_x_continuous(minor_breaks = seq(from = 0, to = xmax, by = 1)) +
scale_y_continuous(labels = scales::comma) +
xlab(paste0("Days since cases reached 100")) +
ylab("Number of tests per million population ") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom") +
theme_minimal() +
ggtitle("State Trajectories: Number of Tests per Million Population") +
geom_dl(aes(label = state), method = list(dl.trans(x = x - 0.1), "last.points", cex = 0.8)) +
theme(legend.position = "bottom")
df_test = df_current %>%
mutate(pos_rate = positive / totalTestResults) %>%
select(state, positive, totalTestResults, pos_rate, test_per_million_pop) %>%
filter(positive >= 100) %>%
arrange(desc(positive))
national_avg = df_current %>%
ungroup() %>%
summarise(avg_positive_rate = sum(positive, na.rm = TRUE) / sum(totalTestResults, na.rm = TRUE),
avg_test_per_million_pop = round(sum(totalTestResults, na.rm = TRUE) / sum(population, na.rm = TRUE) * 1000000)) %>%
unlist()
title = paste0("Cross-State Comparison \nNational Average: Positive Rate: ",
round(national_avg[1] * 1000) / 10,
"%; Tests per Million Population: ",
round(national_avg[2]))
state_list = df_current %>% arrange(desc(positive)) %>% pull(state)
state_list = state_list[1:10]
ggplot(data = df_test %>% filter(!state %in% state_list), aes(x = test_per_million_pop, y = pos_rate, label = state)) +
geom_text(cex = 2.5, color = "black") +
geom_text(data = df_test %>% filter(state %in% state_list), cex = 2.5, color = "red") +
geom_hline(yintercept = national_avg[1], linetype="dashed", color = "grey") +
geom_vline(xintercept = national_avg[2], linetype="dashed", color = "grey") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous(labels = scales::comma) +
xlab("Tests per million population") + ylab("Positive rate") + ggtitle(title) +
theme_minimal() + theme(legend.position = "right")
state_list = df_current %>% arrange(desc(death)) %>% pull(state)   # interested in the top 10 states in terms of number of cases
state_list = state_list[2:10]
ymax = ceiling(max(df_trajectory$death) / 1000) * 1000
xmax = ceiling(max(df_trajectory$day) / 5) *5
ggplot(data = df_trajectory %>% filter(state %in% state_list), aes(x = day, y = death)) +
geom_line(aes(color = state), size = 0.5) +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(minor_breaks = seq(from = 0, to = xmax, by = 1)) +
xlab(paste0("Days since cases reached 100")) +
ylab("Number of deaths") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom") +
theme_minimal() +
ggtitle("State Trajectories: Number of Deaths") +
geom_dl(aes(label = state), method = list(dl.trans(x = x - 0.1), "last.points", cex = 0.8)) +
theme(legend.position = "bottom")
plot_state = function(state_name){
df_trajectoy_state = df_trajectory %>%
filter(state == state_name) %>%
mutate(deathDailyIncrease = death - lag(death),
deathDailyIncrease = if_else(is.na(deathDailyIncrease), 0, as.double(deathDailyIncrease)),
deathRate = death / positive)
# projection assuming same growth rate
xmax = max(df_trajectoy_state$day)
ymax = max(df_trajectoy_state$death)
y = df_trajectoy_state$death[(xmax - 7) : (xmax - 3)]
x = df_trajectoy_state$day[(xmax - 7) : (xmax - 3)]
f = lm(log(y) ~ x)$coefficients
l = function(x) exp(f[1] + f[2] * x)
projection <- data.frame(x = (xmax - 7) : xmax, y = NA)
projection$y <- l(projection$x)
str = paste0("Average growth rate 3~7 days ago: ", round((exp(f[2]) - 1) * 100), "%")
# time series of positive cases
ggplot(data = df_trajectoy_state, aes(x = day)) +
geom_line(aes(y = death, color = "Deaths")) +
geom_bar(stat = "identity", aes(y = deathDailyIncrease, fill = "Daily Increase in Deaths")) +
geom_line(data = projection, aes(x = x, y = y, color = "Constant Growth"), linetype = "dashed") +
# geom_line(aes(y = deathRate * ymax * 10, color = "Death Rate")) +
scale_y_continuous(labels = scales::comma
# , sec.axis = sec_axis(~. / ymax , name = "Death Rate",
#                     breaks = seq(0, 1,length.out = 6),
#                     labels = c("0%", "2%", "4%", "6%", "8%", "10%"))
) +
scale_x_continuous(breaks = seq(0, xmax, 5), labels = (df_trajectoy_state$date)[1 + seq(0, xmax, 5)]) +
scale_color_manual(values = c(
# "red",
"grey","darkred")) +
scale_fill_manual(values = c("darkblue")) +
xlab("Date") +
ylab("Number of Deaths") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggtitle(paste0("Spread of Covid-19 in ", state_name, ": Deaths\n", str))
}
plot_state("NY")
plot_state("CA")
plot_state("WA")
plot_state("NJ")
project_state = function(state_name){
df_trajectoy_state = df_trajectory %>%
filter(state == state_name) %>%
mutate(deathDailyIncrease = death - lag(death),
deathDailyIncrease = if_else(is.na(deathDailyIncrease), 0, as.double(deathDailyIncrease)),
deathRate = death / positive)
# fit curve
y = df_trajectoy_state %>% pull(death)
t = df_trajectoy_state %>% pull(day)
# initial parameter
sigma = 10
mu = 30
alpha = 5000
parm0 = c(mu, sigma, alpha)
# loss function
loss = function(parm){
death_curve = function(x, parm) parm[3] * pnorm((x - parm[1])/parm[2])
y_hat = death_curve(t, parm)
return(sum((y - y_hat)^2) * 0.5)
}
# optimization
parm_star = optimx(par = parm0, loss, lower = c(0, 0, 0), upper = c(300, 1000, 100000))
mu = as.numeric(parm_star[1])
sigma = as.numeric(parm_star[2])
alpha = as.numeric(parm_star[3])
# projection
death_curve = function(x) alpha * pnorm((x - mu)/sigma)
# plot projection
projection_state = data.frame(day = (1 : (2*mu)),
projectedDeath = death_curve(1 : (2*mu)))
title = paste0("Spread of Covid-19 in ", state_name, ": \n", "Projected peak at ", df_trajectoy_state$date[1] + mu,
"; Projected total deaths ", round(alpha))
ggplot(data = projection_state, aes(x = day)) +
geom_line(aes(y = projectedDeath, color = "Projected Deaths")) +
geom_line(data = df_trajectoy_state, aes(x = day, y = death, color = "Deaths")) +
geom_bar(data = df_trajectoy_state, stat = "identity", aes(y = deathDailyIncrease, fill = "Daily Increase in Deaths")) +
scale_y_continuous(labels = scales::comma, limits = c(0, alpha)) +
scale_x_continuous(breaks = seq(0, 2*mu, 14), labels = df_trajectoy_state$date[1] + seq(0, 2*mu, 14)) +
scale_color_manual(values = c("darkred","grey")) +
scale_fill_manual(values = c("darkblue")) +
xlab("Date") +
ylab("Number of Deaths") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank(),
axis.text.x = element_text(angle = 45)) +
ggtitle(title)
}
project_state("NY")
project_state("NY")
